// Code generated by mockery v2.43.2. DO NOT EDIT.

package http

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/ShukinDmitriy/GophKeeper/internal/common/models"

	requests "github.com/ShukinDmitriy/GophKeeper/internal/common/models/requests"
)

// ClientInterface is an autogenerated mock type for the ClientInterface type
type ClientInterface struct {
	mock.Mock
}

type ClientInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *ClientInterface) EXPECT() *ClientInterface_Expecter {
	return &ClientInterface_Expecter{mock: &_m.Mock}
}

// CreateData provides a mock function with given fields: ctx, data
func (_m *ClientInterface) CreateData(ctx context.Context, data requests.DataModel) (*models.DataInfo, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for CreateData")
	}

	var r0 *models.DataInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, requests.DataModel) (*models.DataInfo, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, requests.DataModel) *models.DataInfo); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.DataInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, requests.DataModel) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_CreateData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateData'
type ClientInterface_CreateData_Call struct {
	*mock.Call
}

// CreateData is a helper method to define mock.On call
//   - ctx context.Context
//   - data requests.DataModel
func (_e *ClientInterface_Expecter) CreateData(ctx interface{}, data interface{}) *ClientInterface_CreateData_Call {
	return &ClientInterface_CreateData_Call{Call: _e.mock.On("CreateData", ctx, data)}
}

func (_c *ClientInterface_CreateData_Call) Run(run func(ctx context.Context, data requests.DataModel)) *ClientInterface_CreateData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(requests.DataModel))
	})
	return _c
}

func (_c *ClientInterface_CreateData_Call) Return(_a0 *models.DataInfo, _a1 error) *ClientInterface_CreateData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientInterface_CreateData_Call) RunAndReturn(run func(context.Context, requests.DataModel) (*models.DataInfo, error)) *ClientInterface_CreateData_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteData provides a mock function with given fields: ctx, id
func (_m *ClientInterface) DeleteData(ctx context.Context, id uint) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientInterface_DeleteData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteData'
type ClientInterface_DeleteData_Call struct {
	*mock.Call
}

// DeleteData is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint
func (_e *ClientInterface_Expecter) DeleteData(ctx interface{}, id interface{}) *ClientInterface_DeleteData_Call {
	return &ClientInterface_DeleteData_Call{Call: _e.mock.On("DeleteData", ctx, id)}
}

func (_c *ClientInterface_DeleteData_Call) Run(run func(ctx context.Context, id uint)) *ClientInterface_DeleteData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint))
	})
	return _c
}

func (_c *ClientInterface_DeleteData_Call) Return(_a0 error) *ClientInterface_DeleteData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientInterface_DeleteData_Call) RunAndReturn(run func(context.Context, uint) error) *ClientInterface_DeleteData_Call {
	_c.Call.Return(run)
	return _c
}

// GetList provides a mock function with given fields: ctx, dataType
func (_m *ClientInterface) GetList(ctx context.Context, dataType models.DataType) ([]models.DataInfo, error) {
	ret := _m.Called(ctx, dataType)

	if len(ret) == 0 {
		panic("no return value specified for GetList")
	}

	var r0 []models.DataInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.DataType) ([]models.DataInfo, error)); ok {
		return rf(ctx, dataType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.DataType) []models.DataInfo); ok {
		r0 = rf(ctx, dataType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DataInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.DataType) error); ok {
		r1 = rf(ctx, dataType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_GetList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetList'
type ClientInterface_GetList_Call struct {
	*mock.Call
}

// GetList is a helper method to define mock.On call
//   - ctx context.Context
//   - dataType models.DataType
func (_e *ClientInterface_Expecter) GetList(ctx interface{}, dataType interface{}) *ClientInterface_GetList_Call {
	return &ClientInterface_GetList_Call{Call: _e.mock.On("GetList", ctx, dataType)}
}

func (_c *ClientInterface_GetList_Call) Run(run func(ctx context.Context, dataType models.DataType)) *ClientInterface_GetList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.DataType))
	})
	return _c
}

func (_c *ClientInterface_GetList_Call) Return(_a0 []models.DataInfo, _a1 error) *ClientInterface_GetList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientInterface_GetList_Call) RunAndReturn(run func(context.Context, models.DataType) ([]models.DataInfo, error)) *ClientInterface_GetList_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function with given fields: ctx, data
func (_m *ClientInterface) Login(ctx context.Context, data requests.UserLogin) error {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, requests.UserLogin) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientInterface_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type ClientInterface_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - data requests.UserLogin
func (_e *ClientInterface_Expecter) Login(ctx interface{}, data interface{}) *ClientInterface_Login_Call {
	return &ClientInterface_Login_Call{Call: _e.mock.On("Login", ctx, data)}
}

func (_c *ClientInterface_Login_Call) Run(run func(ctx context.Context, data requests.UserLogin)) *ClientInterface_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(requests.UserLogin))
	})
	return _c
}

func (_c *ClientInterface_Login_Call) Return(_a0 error) *ClientInterface_Login_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientInterface_Login_Call) RunAndReturn(run func(context.Context, requests.UserLogin) error) *ClientInterface_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: ctx, data
func (_m *ClientInterface) Register(ctx context.Context, data requests.UserRegister) error {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, requests.UserRegister) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientInterface_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type ClientInterface_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx context.Context
//   - data requests.UserRegister
func (_e *ClientInterface_Expecter) Register(ctx interface{}, data interface{}) *ClientInterface_Register_Call {
	return &ClientInterface_Register_Call{Call: _e.mock.On("Register", ctx, data)}
}

func (_c *ClientInterface_Register_Call) Run(run func(ctx context.Context, data requests.UserRegister)) *ClientInterface_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(requests.UserRegister))
	})
	return _c
}

func (_c *ClientInterface_Register_Call) Return(_a0 error) *ClientInterface_Register_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientInterface_Register_Call) RunAndReturn(run func(context.Context, requests.UserRegister) error) *ClientInterface_Register_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateData provides a mock function with given fields: ctx, data
func (_m *ClientInterface) UpdateData(ctx context.Context, data models.DataInfo) (*models.DataInfo, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for UpdateData")
	}

	var r0 *models.DataInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.DataInfo) (*models.DataInfo, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.DataInfo) *models.DataInfo); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.DataInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.DataInfo) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientInterface_UpdateData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateData'
type ClientInterface_UpdateData_Call struct {
	*mock.Call
}

// UpdateData is a helper method to define mock.On call
//   - ctx context.Context
//   - data models.DataInfo
func (_e *ClientInterface_Expecter) UpdateData(ctx interface{}, data interface{}) *ClientInterface_UpdateData_Call {
	return &ClientInterface_UpdateData_Call{Call: _e.mock.On("UpdateData", ctx, data)}
}

func (_c *ClientInterface_UpdateData_Call) Run(run func(ctx context.Context, data models.DataInfo)) *ClientInterface_UpdateData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.DataInfo))
	})
	return _c
}

func (_c *ClientInterface_UpdateData_Call) Return(_a0 *models.DataInfo, _a1 error) *ClientInterface_UpdateData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientInterface_UpdateData_Call) RunAndReturn(run func(context.Context, models.DataInfo) (*models.DataInfo, error)) *ClientInterface_UpdateData_Call {
	_c.Call.Return(run)
	return _c
}

// NewClientInterface creates a new instance of ClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientInterface {
	mock := &ClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
